var mongoose = require('mongoose');
var request = require('request');
var user = require('config/models');
exports.login = function(name,mobno,reg_id,callback) {
var newuser = new user.users({
  name: name,
  mobno: mobno,
  reg_id: reg_id});
user.users.find({mobno: mobno},function(err,users){
var len = users.length;
if(len == 0){
  newuser.save(function (err) {
  callback({'response':"Sucessfully Registered"});
});
}else{
  callback({'response':"User already Registered"});
}});
}
exports.getuser = function(mobno,callback) {
user.users.find(function(err,users){
var len = users.length;
if(len == 0){
  callback({'response':"No Users Registered"});
}else{
callback(removeUser(users, mobno));
}});
}
exports.removeuser = function(mobno,callback) {
user.users.remove({mobno:mobno},function(err,users){
  if(!err){
    callback({'response':"Removed Sucessfully"});
  }else{
    callback({'response':"Error"});
  }
});
}
exports.getchat = function(fromu,fromn,to,callback){
	user.users.find({mobno:to},function(err,users){
		var len = users.length;
		if(len == 0)
		{
			callback('response',"failure");
			
		}
		else{
			var name = users[0].name;
			var n = fromn.localeCompare(name);
			var identifier = name;
			if(n<0)
			{
				var temp = fromn.concat(":");
				identifier = temp.concat(name);
			}
			else
			{
				var temp = name.concat(":");
				identifier = temp.concat(fromn);
			}
			user.messagesTable.find({identifier_message_number:identifier},function(err,messagesTable)
			{
				var len = messagesTable.length;
				if(len == 0)
				{
					callback({'response':"No messages"});
				}
				else
				{
					callback(getMessages(messagesTable, identifier))
				}
			});
		}
	});

}
exports.send = function(fromn,fromu,to,msg,callback) {
user.users.find({mobno: to},function(err,users){
var len = users.length;
if(len == 0){
callback({'response':"Failure"});
}else{
  var to_id = users[0].reg_id;
  var name = users[0].name;
request(
    { method: 'POST',
    uri: 'https://android.googleapis.com/gcm/send',
    headers: {
        'Content-Type': 'application/json',
        'Authorization':'key=AIzaSyBsUwXCh2szUC2X-jIFxvkI-viaqXKhV6E'
    },
    body: JSON.stringify({
  "registration_ids" : [to_id],
  "data" : {
    "msg":msg,
    "fromu":fromu,
    "name":fromn
  },
  "time_to_live": 108
})
    }
  , function (error, response, body) {
    callback({'response':"Success"});
    }
  )
  var n = fromn.localeCompare(name);
  var identifier = fromn;
  var total_messages = "1";
  if(n<0)
  {
	  var temp = fromn.concat(":");
	  identifier = temp.concat(name);
  }
  else
  {
	  var temp = name.concat(":");
	  identifier = temp.concat(fromn);
  }
  user.totalMessageTable.find({identifier:identifier},function(err,totalMessageTable)
  {
	  var len = totalMessageTable.length;
	  if(len == 0)
	  {
		  var newTotal = new user.totalMessageTable({
			  identifier : identifier,
			  total_messages : "1"
		  });
		  newTotal.save(function (err)
		  {
			  callback({'response':"Created first chat entry"});
		  });
	  }
	  else
	  {
		  var num = totalMessageTable[0].total_messages;
		 
		  var val = parseInt(num);
		  var newval = val+1;
		  
		   var total= newval.toString();
		   total_messages = total;
		   totalMessageTable[0].total_messages = total;
		   totalMessageTable[0].save(function(err)
		   {
			   callback("response","incremented");
		   });
		 
	  }
  });
  user.totalMessageTable.find({identifier:identifier},function(err,totalMessageTable){
	 var len = totalMessageTable.length; 
	 if(len > 0)
	 {
		 var num = totalMessageTable[0].total_messages;
		 var newMessage = new user.messagesTable({
		identifier_message_number : identifier,
		message : msg,
		from : fromn,
		flag : "f0"
	 
		});
	 }
	 else
	{
	  var newMessage = new user.messagesTable({
	 identifier_message_number : identifier,
	 message : msg,
	 from : fromn,
	 flag : "f0"
	 
	});
	}
  newMessage.save(function (err) {
  callback({'response':"Sucessfully saved"});
});
  
  });
  
  

}});
}
function removeUser(arr, val) {
    for(var i=0; i<arr.length; i++) {
        if(arr[i].mobno == val) {
            arr.splice(i, 1);
            return arr;
            break;
        }
    }
}

function getMessages(arr, val){
	for(var i =0; i<arr.length; i++)
	{
		if(arr[i].identifier_message_number != val)
		{
			arr.splice(i,1);
		}
	}
	return arr;
}
 